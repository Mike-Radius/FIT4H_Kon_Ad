ACCESS A TERMINAL

There are two ways to acces a terminal: over the GUI and a virtual Terminal

->You can find the GUI terminal on the desktopbar.
->The virtual one can also started over the GUI but needs a login

 hotkey for terminal: Ctrl-Alt-F1. Note: On virtual machines, virtual terminals may not be available.

 ------------------------------------------------------------
PROMPT

[sysadmin@localhost ~]

user = sysadmin
System's name = localhost
current directory = ~ -> home(hängt vom Benutzernamen ab) directory

--------------------------------------------------------------
SHELL

shell = interpreter = converts commands into actions
Most common linux shell is bash

Scripting: Store commands in a file and execute them by starting the script.

Aliases: type a short command for a long one.

Variables:variables can be used to modify how commands and features work
--------------------------------------------------------------
FORMATTING COMMANDS

command [options] [arguments]
						|					|
						|		arguments are used to provide additional 
						|		information (such as a filename or a username)
						|
Options are used to modify the core behavior

Each option and argument is normally separated by a space, although options can often be combined together.
---------------------------------------------------------------
WORKING WITH OPTIONS

Single-letter options are preceded by a single dash (-). Full-word options are preceded by two dashes (--)
---------------------------------------------------------------
COMMAND HISTORY

history = zeigt die letzten Befehle an

!3 = Executes the third command from the history list

history 5	= Show the last five commands from the history list
!!	= Execute the last command again
!-5	= Execute the fifth command from the bottom of the history list
!ls	= Execute the most recent ls command
----------------------------------------------------------------
BASH SHELL VARIABLES

echo = to display a variable
echo $HISTSIZE = gibt die Menge an Speichereinheiten aus (HISTSIZE ist die Variable)
----------------------------------------------------------------
PATH VARIABLES

echo $PATH = This variable is used to find the location of commands
it determine the location of the command
-----------------------------------------------------------------
GLOBBING

When glob characters are used, the shell will "expand" the entire pattern to match all files in the specified directory that matches the pattern.(Systemzeichen zum erweiter)

echo * = * matches "zero or more" characters in a file name

echo D* = searches for all files which begins with D

echo ??????? = shows all files with the exact length of the question mark(result=Desktop)

This glob uses a pair of square brackets ( [ ] ) to specify which one character will be allowed. The allowed characters can be specified as a range, a list, or by what is known as a character class.

The allowed characters can also be negated with an exclamation point "!"

echo [DP]* = Desktop Documents Pictures Puplic
echo [!DP]* = Music Templates Videos

Range symbol -
echo [D-P]* 
echo [!D-P]*
----------------------------------------------------------
Quoting

Three types of quotes = '' , "" , ``

Single quotes prevent the shell from "interpreting" or expanding all special characters. Often single quotes are used to protect a string from being changed by the shell, so that the string can be interpreted by a command as a parameter to affect the way the command is executed.

Double quotes stop the expansion of glob characters like the asterisk (*), question mark (?), and square brackets ( [ ] ). Double quotes do allow for both variable expansion and command substitution (see back quotes) to take place.

Back quotes cause "command substitution" which allows for a command to be executed within the line of another command.

The shell also provides a way to block the interpretation of just a single character called "escaping" the character. To "escape" the special meaning of a shell metacharacter, the backslash "\" character is used as a prefix to that one character.

echo Today is $(date) = today is Wed Dec 11 22:13:45 UTC 2013

echo This is the command '`date`' = to prevent the date to be executed
echo This is the command \`date\` = to prevent the date to be executed

Double quote characters don't have any effect on backquote characters

Double quote characters will have an effect on wildcard characters, disabling their special meaning

echo "D*" = D*
--------------------------------------------------------
CONTROL STATEMANTS

The Bash shell offers three different statements that can be used to separate multiple commands typed together

The && characters create a logical and statement. Commands separated by && are conditionally executed. If the command on the left of the && is successful, then the command to the right of the && will also be executed. If the command to the left of the && fails, then the command to the right of the && is not executed.

The || characters create a logical or statement, which also causes conditional execution. When commands are separated by ||, then only if the command to the left fails, does the command to the right of the || execute. If the command to the left of the || succeeds, then the command to the right of the || will not execute.

; um Befehele von einander zu trennen

&& logische UND Verknüpfung

|| logische ODER Verknüpfung

true liefert ein wahr zurück
false liefert ein falsch zurück
--------------------------------------------------------------
HISTORY

history = zeigt alle eingegebenen Befehle mit einer Nummer

Other useful keys for editing include the Home, End, Backspace and Delete keys.

history 4 = zeigt die letzten 4 eingegebenen Befehle

!4 = führt den 4. Befehl nochmal aus